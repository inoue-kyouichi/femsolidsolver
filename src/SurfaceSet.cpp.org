/**
 * @file TriangleSet.cpp
 * @brief rigid body class
 * @author T. Otani
 */
#include "fem.h"
#include <iostream>
#include <cstdio>
#include <cmath>
#include "math_tools.h"
using namespace std;

// #########################################################
/**
 * @brief read ply file (ascii)
 */
void SurfaceSet::translation(const double (&center)[3])
{
  for(int i=0;i<numOfNode;i++){
    for(int j=0;j<3;j++) x[i][j]-=center[j];
  }
}

void SurfaceSet::rotation(const double (&q)[4])
{
  double R[3][3],xtmp[3];
  mathTool::quaternion2rotation(R,q);

  double I[3][3];
  for(int i=0;i<3;i++){
    for(int j=0;j<3;j++){
      I[i][j]=0e0;
      for(int k=0;k<3;k++) I[i][j]+=R[k][i]*R[k][j];
    }
  }
  // for(int i=0;i<3;i++){
  //   printf("%e %e %e\n",R[i][0],R[i][1],R[i][2]);
  // }

  for(int i=0;i<numOfNode;i++){
    for(int j=0;j<3;j++) xtmp[j]=0e0;
    for(int j=0;j<3;j++){
      for(int k=0;k<3;k++) xtmp[j]+=R[j][k]*x[i][k];
    }
    for(int j=0;j<3;j++) x[i][j]=xtmp[j];
  }
}

// #########################################################
/**
 * @brief read ply file (ascii)
 */
void SurfaceSet::setBoundaryNode(const int numberOfTotalNode)
{
  INTARRAY1 node=Allocation::allocate1dINT(numberOfTotalNode);
  for(int i=0;i<numberOfTotalNode;i++) node[i]=0;

  numOfNode=0;
  for(int i=0;i<numOfElm;i++){
    for(int j=0;j<4;j++){
      if(node[elm[i][j]]==0){
        node[elm[i][j]]=1;
        numOfNode++;
      }
    }
  }

  boundaryNode=Allocation::allocate1dINT(numOfNode);

  int num=0;
  for(int i=0;i<numberOfTotalNode;i++){
    if(node[i]==1){
      boundaryNode[num]=i;
      num++;
    }
  }

  free(node);
}

// #########################################################
/**
 * @brief read ply file (ascii)
 */
void SurfaceSet::readDAT(const std::string &file,const int elementNumber)
{
  int ret,dummy;
  char tmp[100],tmp2[100];
  FILE *fp;

  numOfElm=elementNumber;

  if((fp=fopen(file.c_str(),"r"))==NULL){
    cout << file << " open error" << endl;
    exit(1);
  }
  elm=Allocation::allocate2dINT(numOfElm,4);
  for(int i=0;i<numOfElm;i++){
    fscanf(fp,"%d %d %d %d\n",&elm[i][0], &elm[i][1], &elm[i][2], &elm[i][3]);
  }
  fclose(fp);
}

// #########################################################
/**
 * @brief read ply file (ascii)
 */
void SurfaceSet::readVTU(const std::string &file,const int nodeNumber,const int elementNumber)
{
  int ret,dummy;
  char tmp[100],tmp2[100];
  FILE *fp;

  numOfNode=nodeNumber;
  numOfElm=elementNumber;

  if((fp=fopen(file.c_str(),"r"))==NULL){
    cout << file << " open error" << endl;
    exit(1);
  }
  fgets(tmp,100,fp);
  fgets(tmp,100,fp);
  fgets(tmp,100,fp);
  fgets(tmp,100,fp);
  fgets(tmp,100,fp);
  fgets(tmp,100,fp);

  x=Allocation::allocate2dDOUBLE(numOfNode,3);
  elm=Allocation::allocate2dINT(numOfElm,4);

  for(int i=0;i<numOfNode;i++){
    fscanf(fp,"%lf %lf %lf\n",&x[i][0], &x[i][1], &x[i][2]);
  }

  fgets(tmp,100,fp);
  fgets(tmp,100,fp);
  fgets(tmp,100,fp);
  fgets(tmp,100,fp);
  for(int i=0;i<numOfElm;i++){
    fscanf(fp,"%d %d %d %d\n",&elm[i][0], &elm[i][1], &elm[i][2], &elm[i][3]);
  }

  fclose(fp);
}
// #################################################################
/**
 * @brief calc boundary conditions
 * @param [in] stress
 */
void SurfaceSet::exportVTU(const string &file)
{
  int num;
  FILE *fp;
  if((fp=fopen(file.c_str(),"w"))==NULL){
    printf("file open error\n");
    exit(1);
  }

  fprintf(fp,"<?xml version=\"1.0\"?>\n");
  fprintf(fp,"  <VTKFile type=\"UnstructuredGrid\" version=\"1.0\" byte_order=\"LittleEndian\" header_type=\"UInt64\">\n");
  fprintf(fp,"    <UnstructuredGrid>\n");
  fprintf(fp,"      <Piece NumberOfPoints=\"%d\" NumberOfCells=\"%d\">\n",numOfNode,numOfElm);
  fprintf(fp,"        <Points>\n");
  fprintf(fp,"          <DataArray type=\"Float64\" Name=\"Points\" NumberOfComponents=\"3\" format=\"ascii\">\n");
  for(int i=0;i<numOfNode;i++){
  fprintf(fp,"            %e %e %e\n",x[i][0],x[i][1],x[i][2]);
  }
  fprintf(fp,"          </DataArray>\n");
  fprintf(fp,"        </Points>\n");
  fprintf(fp,"      <Cells>\n");
  fprintf(fp,"          <DataArray type=\"Int64\" Name=\"connectivity\" format=\"ascii\">\n");
  for(int i=0;i<numOfElm;i++){
    fprintf(fp,"            ");
    for(int j=0;j<4;j++) fprintf(fp,"%d ",elm[i][j]);
    fprintf(fp,"\n");
  }
  fprintf(fp,"          </DataArray>\n");

  fprintf(fp,"          <DataArray type=\"Int64\" Name=\"offsets\" format=\"ascii\">\n");
  num=4;
  for(int i=0;i<numOfElm;i++){
    fprintf(fp,"            %d\n",num);
    num += 4;
  }
  fprintf(fp,"          </DataArray>\n");

  fprintf(fp,"          <DataArray type=\"Int64\" Name=\"types\" format=\"ascii\">\n");
  for(int i=0;i<numOfElm;i++){
    fprintf(fp,"            9\n");
  }
  fprintf(fp,"          </DataArray>\n");

  fprintf(fp,"      </Cells>\n");

  fprintf(fp,"       <PointData>\n");
  fprintf(fp,"       </PointData>\n");
  fprintf(fp,"     </Piece>\n");
  fprintf(fp,"    </UnstructuredGrid>\n");
  fprintf(fp,"  </VTKFile>\n");
  fclose(fp);
}
